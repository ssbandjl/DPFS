git repo: https://github.com/ssbandjl/DPFS
update submodule: git submodule update --init --recursive


DPFS Arch:

dpfs_kv/main.cpp -> main
    dpfs_fuse_main
        struct dpfs_fuse *fuse = dpfs_fuse_new(&ops, conf_path, vnfs, NULL, NULL)
            fuse_ll_map(f_ll)
            hal_params.ops.request_handler = fuse_handle_req;
                fuse_handler_t h = fuse_ll->fuse_handlers[in_hdr->opcode]
            hal_params.ops.register_device = register_dpfs_device;
                ndevices++
            hal_params.ops.unregister_device = unregister_dpfs_device;
            struct dpfs_hal *hal = dpfs_hal_new(&hal_params, false)
        dpfs_fuse_loop


HAL -> dpfs_hal/src/snap.c
dpfs_hal_new
    struct dpfs_hal *hal = calloc(1, sizeof(struct dpfs_hal))
    nvme_init_logger
    mlnx_snap_pci_manager_init
    dpfs_hal_init_dev(hal, dev, device_id, emu_manager.u.s, pf.u.i, tag.u.s, qd.u.i)
        param.dev_type = "virtiofs_emu"
        param.virtiofs_emu_handle_req = dpfs_hal_handle_req
            hal->ops.request_handler(hal->user_data, in_iov, in_iovcnt, out_iov, out_iovcnt, done_ctx, dev->device_id)
        struct virtio_fs_ctrl_init_attr param
        struct virtio_fs_ctrl *snap_ctrl = virtio_fs_ctrl_init(&param)
        hal->ops.register_device(hal->user_data, device_id)
    pthread_create(&hal->mock_thread, NULL, dpfs_hal_mock_thread, hal)
        virtio_fs_ctrl_progress_all_io
        virtio_fs_ctrl_progress
        virtio_fs_ctrl_suspend



introduce:
DPFS 框架允许云和数据中心运营商使用 DPU 卸载为租户提供虚拟化文件系统服务。借助 DPFS，完整的文件系统实现可在 DPU 的 CPU 复合体上运行。租户通过virtio-fsDPU 在 PCIe 上公开的设备（通过 SR-IOV 实现多租户）使用文件系统。DPFS 提供硬件抽象层、FUSE API 实现和多个文件系统实现。, 警告：DPFS 目前是一个研究项目，因此其代码尚未经过实战测试，也不是很干净。请自行决定是否使用

在 BlueField-2（目前仅支持 DPU）上运行所需的 Nvidia SNAP 库是闭源的，需要补丁才能启用异步请求完成

联系方式和致谢
🇨🇭 IBM 苏黎世研究中心混合云/基础设施软件小组
🇳🇱 阿姆斯特丹自由大学的 StoNet 研究





fuse_ll_map
    fuse_ll->fuse_handlers[FUSE_INIT] = fuse_ll_init;
    fuse_ll->fuse_handlers[FUSE_DESTROY] = fuse_ll_destroy;
    fuse_ll->fuse_handlers[FUSE_GETATTR] = fuse_ll_getattr;
    fuse_ll->fuse_handlers[FUSE_LOOKUP] = fuse_ll_lookup;
    fuse_ll->fuse_handlers[FUSE_SETATTR] = fuse_ll_setattr;
    fuse_ll->fuse_handlers[FUSE_OPENDIR] = fuse_ll_opendir;
    fuse_ll->fuse_handlers[FUSE_RELEASEDIR] = fuse_ll_releasedir;
    fuse_ll->fuse_handlers[FUSE_READDIR] = fuse_ll_readdir;
    fuse_ll->fuse_handlers[FUSE_READDIRPLUS] = fuse_ll_readdirplus;
    fuse_ll->fuse_handlers[FUSE_OPEN] = fuse_ll_open;
    fuse_ll->fuse_handlers[FUSE_RELEASE] = fuse_ll_release;
    //// We don't impl FUSE_FLUSH. The only use would be to return w
    //// but that's of no use with a remote file system
    fuse_ll->fuse_handlers[FUSE_FSYNC] = fuse_ll_fsync;
    fuse_ll->fuse_handlers[FUSE_FSYNCDIR] = fuse_ll_fsyncdir;
    fuse_ll->fuse_handlers[FUSE_CREATE] = fuse_ll_create;
    fuse_ll->fuse_handlers[FUSE_RMDIR] = fuse_ll_rmdir;
    fuse_ll->fuse_handlers[FUSE_FORGET] = fuse_ll_forget;
    fuse_ll->fuse_handlers[FUSE_BATCH_FORGET] = fuse_ll_batch_forget
    fuse_ll->fuse_handlers[FUSE_RENAME] = fuse_ll_rename;
    fuse_ll->fuse_handlers[FUSE_RENAME2] = fuse_ll_rename2;
    fuse_ll->fuse_handlers[FUSE_READ] = fuse_ll_read;
    fuse_ll->fuse_handlers[FUSE_WRITE] = fuse_ll_write;
    fuse_ll->fuse_handlers[FUSE_MKNOD] = fuse_ll_mknod;
    fuse_ll->fuse_handlers[FUSE_MKDIR] = fuse_ll_mkdir;
    fuse_ll->fuse_handlers[FUSE_SYMLINK] = fuse_ll_symlink;
    fuse_ll->fuse_handlers[FUSE_STATFS] = fuse_ll_statfs;
    fuse_ll->fuse_handlers[FUSE_UNLINK] = fuse_ll_unlink;
    fuse_ll->fuse_handlers[FUSE_READLINK] = fuse_ll_readlink;
    fuse_ll->fuse_handlers[FUSE_FLUSH] = fuse_ll_flush;
    fuse_ll->fuse_handlers[FUSE_SETLKW] = fuse_ll_setlkw;
    fuse_ll->fuse_handlers[FUSE_SETLK] = fuse_ll_setlk;
    fuse_ll->fuse_handlers[FUSE_FALLOCATE] = fuse_ll_fallocate;



dpfs_template/main.c -> main -> 这是一个关于如何使用 DPFS 实现 virtio-fs 设备的示例模板，无需使用 DPFS-FUSE 层。这意味着后端必须自行实现和解释 FUSE ABI
    hal_params.ops.request_handler = fuse_handler
    struct dpfs_hal *hal = dpfs_hal_new(&hal_params, false)
    dpfs_hal_loop(hal)
        start_low_latency
            open("/dev/cpu_dma_latency", O_WRONLY)
        dpfs_hal_loop_static
            pthread_create(&hal->mock_thread, NULL, dpfs_hal_mock_thread, hal)
            pthread_create(&tdatas[i].thread, NULL, dpfs_hal_loop_static_thread, &tdatas[i])
                sched_setaffinity(gettid(), sizeof(loop_cpu), &loop_cpu)
                all_devices_suspended
                    virtio_fs_ctrl_is_suspended(hal->devices[i].snap_ctrl)
                dpfs_hal_poll_device(&hal->devices[i])
                    virtio_fs_ctrl_progress_all_io(dev->snap_ctrl)
                    virtio_fs_ctrl_progress(dev->snap_ctrl)
        stop_low_latency
            close(pm_qos_fd)

create_session
    create_session_cb
        lookup_true_rootfh
            lookup_true_rootfh_cb


eRPC
extern/eRPC-arm/README.md
./scripts/do.sh 0 0
scripts/example_autorun_app_file
scripts/run-all.sh
extern/eRPC-arm/hello_world/server.cc
    nexus.register_req_func(kReqType, req_handler)
        req_handler
            resize_msg_buffer
    rpc->run_event_loop(100000)
extern/eRPC-arm/hello_world/client.cc
    create_session
    alloc_msg_buffer_or_die
    enqueue_request
    run_event_loop





enqueue_request
    void Rpc<TTr>::kick_req_st
        enqueue_pkt_tx_burst_st
            do_tx_burst_st
                transport_->tx_burst(tx_burst_arr_, tx_batch_i_) -> void IBTransport::tx_burst
                    int ret = ibv_post_send(qp, &send_wr[0], &bad_wr)
                    

dpfs_rvfs: remote virt fs
dpfs_rvfs_dpu，此二进制文件使用 dpfs_hal virtio-fs 抽象层，并使用 RVFS 二进制格式的 eRPC 通过网络直接向远程服务器发送请求。RVFS 二进制格式此格式将描述远程虚拟文件系统协议，即通过 RPC 直接通过网络的 virtio-fs。格式可能会更改和正在进行中。此协议不直接向消费​​者/云租户公开，消费者/云租户使用 virtio-fs。因此，我们不会在网络格式中构建任何向后兼容性
int main(int argc, char **argv)
    hal_params.ops.request_handler = fuse_handler
        resize_msg_buffer
        enqueue_request
    hal_params.ops.register_device = register_dpfs_device





dpfs_nfs/main.c -> Implemented new HAL multi-tenancy threading in NFS -> https://github.com/ssbandjl/DPFS/commit/4d39510f51c8cffe26ae7cfe43d0f247b081d6b4
    dpfs_nfs_main(server.u.s, export.u.s, 0.0, cq_polling.u.b, conf_path)
        inode_table_init
        struct fuse_ll_operations ops
        dpfs_nfs_assign_ops(&ops)
            ops->init = init;
            ops->lookup = lookup;
            ops->getattr = getattr;
            // NFS accepts the NFS:fh
            // its parameter to the d
            ops->opendir = NULL;
            ops->open = vopen;
            ops->read = vread;
            ops->write = vwrite;
                struct write_cb_data *cb_data = mpool_alloc
                cb_data->slotid = vnfs4_op_sequence(&op[0], conn, false)
                struct inode *i = vnfs4_op_putfh_open
                    struct inode *i = inode_table_get(vnfs->inodes, nodeid)
                        size_t hash = inode_table_hash(t, fileid)
                            return fileid % t->size
                rpc_nfs4_compound_async2 vwrite_cb -> LIBNFS is a client library for accessing NFS shares over a network
                    rpc_allocate_pdu2
                        rpc_add_iovector
                    rpc_queue_pdu(rpc, pdu)
                        if (rpc->is_broadcast)
                            sendto
                        if (writev(rpc->fd, &iov[1], niov - 1)
                        rpc_hash_xid
                        rpc_enqueue(&rpc->waitpdu[hash], pdu)
                            q->tail = pdu
            ops->fsync = vfsync;
            ops->release = release;
            // NFS only does fsync(ak
            ops->fsyncdir = NULL;
            // The concept of flushin
            ops->flush = NULL;
            //ops->setattr = (typeof(
            ops->statfs = statfs;
            ops->destroy = destroy;
        dpfs_fuse_new(&ops, conf_path, vnfs, NULL, NULL)
        vnfs->nthreads = dpfs_fuse_nthreads(fuse)
        mpool_init(&vnfs->p[i], sizeof(struct cb_data), 256)
            *p = calloc(1, sizeof(struct mpool))
            (*p)->buffer = malloc
            ck_ring_init(&(*p)->ring, chunks) -> 初始化一个由 ring 指向的有界 FIFO 缓冲区，用于存储最多 size 个指针。size 参数必须是大于或等于 4 的 2 的幂
            void *e = malloc(chunk_size)
        vnfs->conns = calloc(vnfs->nthreads
        vnfs_init_connections(vnfs)
            struct nfs_context *nfs = nfs_init_context()
                nfs->rpc = rpc_init_context()
                rpc_current_time
            nfs_set_version(nfs, NFS_V4)
            nfs_get_rpc_context
            nfs_mount(nfs, vnfs->server, vnfs->export)
                nfs_mount_async(nfs, server, export, mount_cb, &cb_data)
                    nfs3_mount_async
                    or nfs4_mount_async
                        rpc_connect_port_async
                            rpc_connect_port_internal
                                rpc_connect_async rpc_connect_program_4_cb
                                    rpc_connect_sockaddr_async
                                        connect
                                    rpc_connect_program_4_cb
                                        rpc_null_async rpc_connect_program_5_cb
                                            rpc_allocate_pdu
                                                rpc_allocate_pdu2
                                            rpc_queue_pdu
                                            rpc_connect_program_5_cb
                                                data->cb
                wait_for_nfs_reply
                    nfs_service
                        rpc_service(nfs->rpc, revents)
            nfs_set_poll_timeout
            nfs_mt_service_thread_start
            exchangeid
        dpfs_fuse_loop(fuse) -> dpfs_hal_loop
        dpfs_fuse_destroy(fuse)
        inode_table_destroy(vnfs->inodes)